docker ps
docker compose up -d
docker compose down
docker images
1. zookeeper
2. kafka broker
3. debezium
4. postgres

docker exec -it postgres /bin/bash -> To enter any docker container
there is a financial_db in postgres container
inside financial_db there is a table of transactions 
to check the values which are put inside this table using python script 
use SELECT * FROM transactions ;

create a postgres connector in debezium and give out the details of topic prefix and all the other values

to see if we can update the transactions table we can use command
UPDATE transactions set amount = amount + 100 WHERE transaction_id = 'transaction id';
you will receive output = UPDATE 1

ALTER TABLE transactions REPLICA IDENTITY FULL ; (to check the before and after values if we update any coloumns)

curl -H 'Content-Type: application/json' -X PUT localhost:8083/connectors/postgres-fin-connector/config --data '{
  "connector.class": "io.debezium.connector.postgresql.PostgresConnector",
  "topic.prefix": "cdc",
  "decimal.handling.mode": "double",
  "database.user": "postgres",
  "database.dbname": "financial_db",
  "database.hostname": "postgres",
  "database.password": "******",
  "plugin.name": "pgoutput"
}' --> To add any data field into database in debezium (Go into debezium docker container and run this command)


financial_db=# ALTER TABLE transactions add column modified_by TEXT ;
ALTER TABLE
financial_db=# ALTER TABLE transactions add column modified_at TIMESTAMP ;
ALTER TABLE

Add two new coloumns to check whenever there modification made in transactions we can know who did it and when did it

CREATE OR REPLACE FUNCTION record_change_user()
RETURNS TRIGGER AS $$
BEGIN
    NEW.modified_by := current_user;
    NEW.modified_at := CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION record_changed_columns()
RETURNS TRIGGER AS $$
DECLARE
    change_details JSONB;
BEGIN
    change_details := '{}'::JSONB; -- Initialize an empty JSON object

    -- Check if the amount has changed
    IF NEW.amount IS DISTINCT FROM OLD.amount THEN
        change_details := jsonb_insert(
            change_details,
            '{amount}',
            jsonb_build_object(
                'old', OLD.amount,
                'new', NEW.amount,
                'modified_by', current_user,
                'modified_at', NOW()
            )
        );
    END IF;

    -- Update the change_info column with the change details
    NEW.change_info := change_details;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
$$ LANGUAGE plpgsql;
financial_db=# ALTER TABLE transactions ADD COLUMN change_info JSONB ;
financial_db=# CREATE TRIGGER trigger_record_change_info
financial_db-# BEFORE UPDATE ON transactions
financial_db-# FOR EACH ROW EXECUTE FUNCTION record_changed_columns() ;